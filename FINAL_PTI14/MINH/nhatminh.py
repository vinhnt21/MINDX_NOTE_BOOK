from PyQt6.QtWidgets import *
from PyQt6 import uic
import sys
import os

from data import load_essays, save_essays
from model import Essay
from PyQt6.QtCore import Qt
from ai import get_answer, ask_question
from datetime import datetime

MAIN_UI_FILE = os.path.join(os.path.dirname(__file__), "nhatminh.ui")
HISTORY_UI_FILE = os.path.join(os.path.dirname(__file__), "history.ui")




essays = load_essays()


class HistoryWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi(HISTORY_UI_FILE, self)
        
        # Thi·∫øt l·∫≠p toggle mode button
        self.btnToggleMode.setText("‚òÄÔ∏è")
        self.btnToggleMode.setStyleSheet(
            """
            QPushButton {
                font-size: 18px;
                background-color: transparent;
                border: none;
            }
            """
        )
        
        # Kh·ªüi t·∫°o bi·∫øn
        self.dark_mode = False
        self.essays = []
        self.filtered_essays = []
        
        # K·∫øt n·ªëi c√°c signal v√† slot
        self.setup_connections()
        
        # √Åp d·ª•ng theme m·∫∑c ƒë·ªãnh v√† t·∫£i d·ªØ li·ªáu
        self.toggle_dark_mode()
        self.load_data()

    def setup_connections(self):
        """K·∫øt n·ªëi c√°c signal v√† slot"""
        self.btnToggleMode.clicked.connect(self.toggle_dark_mode)
        self.btnRefresh.clicked.connect(self.load_data)
        self.btnDelete.clicked.connect(self.delete_selected_essay)
        self.btnSearch.clicked.connect(self.search_essays)
        self.btnCopyEssay.clicked.connect(self.copy_essay)
        self.btnCopyFeedback.clicked.connect(self.copy_feedback)
        self.btnExport.clicked.connect(self.export_essay)
        self.listEssays.itemClicked.connect(self.display_essay_details)
        self.lineSearch.returnPressed.connect(self.search_essays)

    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ file v√† hi·ªÉn th·ªã trong danh s√°ch"""
        try:
            self.essays = load_essays()
            self.filtered_essays = self.essays.copy()
            self.populate_essay_list()
            self.labelStatus.setText(f"ƒê√£ t·∫£i {len(self.essays)} b√†i vi·∫øt")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {str(e)}")
            self.labelStatus.setText("L·ªói khi t·∫£i d·ªØ li·ªáu")

    def populate_essay_list(self):
        """Hi·ªÉn th·ªã danh s√°ch b√†i vi·∫øt trong list widget"""
        self.listEssays.clear()
        
        for i, essay in enumerate(self.filtered_essays):
            # T·∫°o preview ng·∫Øn c·ªßa b√†i vi·∫øt (50 k√Ω t·ª± ƒë·∫ßu)
            preview = essay.user_essay[:50] + "..." if len(essay.user_essay) > 50 else essay.user_essay
            preview = preview.replace('\n', ' ')  # Lo·∫°i b·ªè xu·ªëng d√≤ng
            
            # T·∫°o item cho list
            item_text = f"B√†i {i+1}: {preview}"
            item = QListWidgetItem(item_text)
            item.setData(Qt.ItemDataRole.UserRole, i)  # L∆∞u index c·ªßa essay
            self.listEssays.addItem(item)

    def search_essays(self):
        """T√¨m ki·∫øm b√†i vi·∫øt theo t·ª´ kh√≥a"""
        search_text = self.lineSearch.text().strip().lower()
        
        if not search_text:
            self.filtered_essays = self.essays.copy()
        else:
            self.filtered_essays = []
            for essay in self.essays:
                # T√¨m ki·∫øm trong c·∫£ b√†i vi·∫øt v√† feedback
                if (search_text in essay.user_essay.lower() or 
                    search_text in essay.ai_feedback.lower()):
                    self.filtered_essays.append(essay)
        
        self.populate_essay_list()
        self.labelStatus.setText(f"T√¨m th·∫•y {len(self.filtered_essays)}/{len(self.essays)} b√†i vi·∫øt")

    def display_essay_details(self, item):
        """Hi·ªÉn th·ªã chi ti·∫øt b√†i vi·∫øt khi ƒë∆∞·ª£c ch·ªçn"""
        try:
            index = item.data(Qt.ItemDataRole.UserRole)
            essay = self.filtered_essays[index]
            
            self.textOriginalEssay.setPlainText(essay.user_essay)
            self.textAIFeedback.setPlainText(essay.ai_feedback)
            
            self.labelStatus.setText(f"ƒêang xem b√†i vi·∫øt {index + 1}")
        except Exception as e:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã chi ti·∫øt: {str(e)}")

    def delete_selected_essay(self):
        """X√≥a b√†i vi·∫øt ƒë∆∞·ª£c ch·ªçn"""
        current_item = self.listEssays.currentItem()
        if not current_item:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt b√†i vi·∫øt ƒë·ªÉ x√≥a!")
            return
        
        # X√°c nh·∫≠n x√≥a
        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n", 
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y kh√¥ng?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                index = current_item.data(Qt.ItemDataRole.UserRole)
                essay_to_delete = self.filtered_essays[index]
                
                # T√¨m v√† x√≥a essay trong danh s√°ch g·ªëc
                self.essays = [e for e in self.essays if e.user_essay != essay_to_delete.user_essay 
                              or e.ai_feedback != essay_to_delete.ai_feedback]
                
                # L∆∞u l·∫°i d·ªØ li·ªáu
                save_essays(self.essays)
                
                # C·∫≠p nh·∫≠t giao di·ªán
                self.load_data()
                
                # X√≥a n·ªôi dung hi·ªÉn th·ªã
                self.textOriginalEssay.clear()
                self.textAIFeedback.clear()
                
                self.labelStatus.setText("ƒê√£ x√≥a b√†i vi·∫øt th√†nh c√¥ng")
                QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a b√†i vi·∫øt!")
                
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt: {str(e)}")

    def copy_essay(self):
        """Copy b√†i vi·∫øt g·ªëc v√†o clipboard"""
        text = self.textOriginalEssay.toPlainText()
        if text:
            clipboard = QApplication.clipboard()
            clipboard.setText(text)
            self.labelStatus.setText("ƒê√£ copy b√†i vi·∫øt v√†o clipboard")
        else:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng c√≥ b√†i vi·∫øt n√†o ƒë·ªÉ copy!")

    def copy_feedback(self):
        """Copy ƒë√°nh gi√° AI v√†o clipboard"""
        text = self.textAIFeedback.toPlainText()
        if text:
            clipboard = QApplication.clipboard()
            clipboard.setText(text)
            self.labelStatus.setText("ƒê√£ copy ƒë√°nh gi√° v√†o clipboard")
        else:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng c√≥ ƒë√°nh gi√° n√†o ƒë·ªÉ copy!")

    def export_essay(self):
        """Xu·∫•t b√†i vi·∫øt ra file text"""
        current_item = self.listEssays.currentItem()
        if not current_item:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt b√†i vi·∫øt ƒë·ªÉ xu·∫•t!")
            return
        
        try:
            index = current_item.data(Qt.ItemDataRole.UserRole)
            essay = self.filtered_essays[index]
            
            # M·ªü dialog ch·ªçn n∆°i l∆∞u file
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Xu·∫•t b√†i vi·∫øt", f"bai_viet_{index+1}.txt", 
                "Text Files (*.txt);;All Files (*)"
            )
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write("=" * 50 + "\n")
                    file.write("B√ÄI VI·∫æT G·ªêC\n")
                    file.write("=" * 50 + "\n\n")
                    file.write(essay.user_essay)
                    file.write("\n\n" + "=" * 50 + "\n")
                    file.write("ƒê√ÅNH GI√Å C·ª¶A AI\n")
                    file.write("=" * 50 + "\n\n")
                    file.write(essay.ai_feedback)
                    file.write(f"\n\n" + "=" * 50 + "\n")
                    file.write(f"Xu·∫•t ng√†y: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                    file.write("=" * 50 + "\n")
                
                self.labelStatus.setText(f"ƒê√£ xu·∫•t b√†i vi·∫øt ra: {file_path}")
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√†i vi·∫øt ra:\n{file_path}")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {str(e)}")

    def toggle_dark_mode(self):
        """Chuy·ªÉn ƒë·ªïi gi·ªØa ch·∫ø ƒë·ªô s√°ng v√† t·ªëi"""
        self.dark_mode = not self.dark_mode

        if self.dark_mode:
            self.btnToggleMode.setText("üåô")
            # Dark mode styles - t∆∞∆°ng t·ª± nhatminh.py
            self.setStyleSheet("""
                QMainWindow {
                    background-color: #1E1E1E;
                }
                QLabel {
                    color: #FFFFFF;
                }
                QLabel#labelTitle {
                    font-size: 24px;
                    font-weight: bold;
                    color: #64B5F6;
                }
                QPushButton {
                    background-color: #2979FF;
                    color: white;
                    border-radius: 5px;
                    padding: 8px;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background-color: #1565C0;
                }
                QTextEdit {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 12px;
                }
                QLineEdit {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    padding: 5px;
                    font-size: 12px;
                }
                QListWidget {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    font-size: 12px;
                }
                QListWidget::item {
                    padding: 8px;
                    border-bottom: 1px solid #555555;
                }
                QListWidget::item:selected {
                    background-color: #2979FF;
                }
                QListWidget::item:hover {
                    background-color: #404040;
                }
                QWidget#mainContent, QWidget#leftPanel, QWidget#rightPanel {
                    background-color: #2D2D2D;
                    border-radius: 10px;
                    padding: 10px;
                }
                QPushButton#btnToggleMode {
                    font-size: 18px;
                    background-color: transparent;
                    border: none;
                }
            """)
        else:
            self.btnToggleMode.setText("‚òÄÔ∏è")
            # Light mode styles - t∆∞∆°ng t·ª± nhatminh.py
            self.setStyleSheet("""
                QMainWindow {
                    background-color: #FFFFFF;
                }
                QLabel {
                    color: #333333;
                }
                QLabel#labelTitle {
                    font-size: 24px;
                    font-weight: bold;
                    color: #1976D2;
                }
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border-radius: 5px;
                    padding: 8px;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background-color: #1976D2;
                }
                QTextEdit {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 12px;
                }
                QLineEdit {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    padding: 5px;
                    font-size: 12px;
                }
                QListWidget {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    font-size: 12px;
                }
                QListWidget::item {
                    padding: 8px;
                    border-bottom: 1px solid #DDDDDD;
                }
                QListWidget::item:selected {
                    background-color: #2196F3;
                    color: white;
                }
                QListWidget::item:hover {
                    background-color: #E3F2FD;
                }
                QWidget#mainContent, QWidget#leftPanel, QWidget#rightPanel {
                    background-color: #FFFFFF;
                    border-radius: 10px;
                    padding: 10px;
                }
                QPushButton#btnToggleMode {
                    font-size: 18px;
                    background-color: transparent;
                    border: none;
                }
            """)



class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi(MAIN_UI_FILE, self)

        self.btnToggleMode.setText("‚òÄÔ∏è")
        self.btnToggleMode.setStyleSheet(
            """
            QPushButton {
                font-size: 18px;
                background-color: transparent;
                border: none;
            }
        """
        )
        self.dark_mode = False


        self.btnEvaluate.clicked.connect(self.evaluate_text)
        self.btnToggleMode.clicked.connect(self.toggle_dark_mode)
        self.btnAsk.clicked.connect(self.ask_additional_question)
        self.btnHistory.clicked.connect(self.open_history_window)

        # ch·∫ø ƒë·ªô t·ªëi v√† l∆∞u tr·ªØ b√†i vi·∫øt/ph·∫£n h·ªìi
        self.dark_mode = False
        self.current_essay = ""
        self.current_feedback = ""
        self.history_window = None

        self.labelQuestion.setVisible(False)
        self.lineQuestion.setVisible(False)
        self.btnAsk.setVisible(False)

        self.toggle_dark_mode()

    def evaluate_text(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ƒë√°nh gi√°"""
        # L·∫•y n·ªôi dung b√†i vi·∫øt
        text = self.textInput.toPlainText().strip()

        if not text:
            QMessageBox.warning(
                self, "C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p b√†i vi·∫øt c·∫ßn ƒë√°nh gi√°!"
            )
            return

        # L·∫•y tr√¨nh ƒë·ªô t·ª´ combobox
        level = self.comboLevel.currentText()

        # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
        self.textOutput.setPlainText("ƒêang ƒë√°nh gi√° b√†i vi·∫øt, vui l√≤ng ƒë·ª£i...")
        QApplication.processEvents()  # C·∫≠p nh·∫≠t giao di·ªán

        # ƒë√°nh gi√°
        result = get_answer(text, level)

        # L∆∞u b√†i vi·∫øt 
        self.current_essay = text
        self.current_feedback = result

        # Hi·ªÉn th·ªã kq
        self.textOutput.setPlainText(result)

        # Hi·ªÉn th·ªã reply
        self.labelQuestion.setVisible(True)
        self.lineQuestion.setVisible(True)
        self.btnAsk.setVisible(True)
        
        # L∆∞u b√†i vi·∫øt
        essays.append(Essay(self.current_essay, self.current_feedback))
        save_essays(essays)
        
    def ask_additional_question(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ƒë·∫∑t c√¢u h·ªèi th√™m"""
        # Ki·ªÉm tra xem ƒë√£ c√≥ b√†i vi·∫øt v√† ph·∫£n h·ªìi ch∆∞a
        if not self.current_essay or not self.current_feedback:
            QMessageBox.warning(
                self, "C·∫£nh b√°o", "Vui l√≤ng ƒë√°nh gi√° b√†i vi·∫øt tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi!"
            )
            return

        # L·∫•y c√¢u h·ªèi
        question = self.lineQuestion.text().strip()
        if not question:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")
            return

        # L·∫•y tr√¨nh ƒë·ªô
        level = self.comboLevel.currentText()

        # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
        current_text = self.textOutput.toPlainText()
        self.textOutput.setPlainText(
            current_text + "\n\nƒêang x·ª≠ l√Ω c√¢u h·ªèi, vui l√≤ng ƒë·ª£i..."
        )
        QApplication.processEvents()  # C·∫≠p nh·∫≠t giao di·ªán

        # G·ªçi API ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
        answer = ask_question(
            self.current_essay, self.current_feedback, question, level
        )

        # Hi·ªÉn th·ªã c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
        self.textOutput.setPlainText(
            current_text + f"\n\nC√¢u h·ªèi: {question}\n\nTr·∫£ l·ªùi: {answer}"
        )

        # X√≥a n·ªôi dung c√¢u h·ªèi
        self.lineQuestion.clear()

    def open_history_window(self):
        """M·ªü c·ª≠a s·ªï l·ªãch s·ª≠ b√†i vi·∫øt"""
        try:
            if self.history_window is None or not self.history_window.isVisible():
                self.history_window = HistoryWindow()
                # ƒê·ªìng b·ªô dark mode
                if self.dark_mode != self.history_window.dark_mode:
                    self.history_window.toggle_dark_mode()
            # m·ªü c·ª≠a s·ªï l·ªãch s·ª≠
            self.history_window.show()
      
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï l·ªãch s·ª≠: {str(e)}")

    def toggle_dark_mode(self):
        """Chuy·ªÉn ƒë·ªïi gi·ªØa ch·∫ø ƒë·ªô s√°ng v√† t·ªëi"""
        self.dark_mode = not self.dark_mode

        # Thay ƒë·ªïi emoji
        if self.dark_mode:
            self.btnToggleMode.setText("üåô")

            # √Åp d·ª•ng dark mode
            self.setStyleSheet(
                """
                QMainWindow {
                    background-color: #1E1E1E;
                }
                QLabel {
                    color: #FFFFFF;
                }
                QLabel#labelTitle {
                    font-size: 28px;
                    font-weight: bold;
                    color: #64B5F6;
                }
                QPushButton {
                    background-color: #2979FF;
                    color: white;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 14px;
                }
                QPushButton:hover {
                    background-color: #1565C0;
                }
                QTextEdit {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 14px;
                }
                QComboBox {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    padding: 5px;
                    font-size: 14px;
                }
                QLineEdit {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    padding: 8px;
                    font-size: 14px;
                }
                QWidget#mainContent {
                    background-color: #2D2D2D;
                    border-radius: 10px;
                    padding: 20px;
                }
                QPushButton#btnToggleMode {
                    font-size: 18px;
                    background-color: transparent;
                    border: none;
                }
            """
            )
        else:
            self.btnToggleMode.setText("‚òÄÔ∏è")

            # √Åp d·ª•ng light mode
            self.setStyleSheet(
                """
                QMainWindow {
                    background-color: #FFFFFF;
                }
                QLabel {
                    color: #333333;
                }
                QLabel#labelTitle {
                    font-size: 28px;
                    font-weight: bold;
                    color: #1976D2;
                }
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 14px;
                }
                QPushButton:hover {
                    background-color: #1976D2;
                }
                QTextEdit {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 14px;
                }
                QComboBox {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    padding: 5px;
                    font-size: 14px;
                }
                QLineEdit {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    padding: 8px;
                    font-size: 14px;
                }
                QWidget#mainContent {
                    background-color: #FFFFFF;
                    border-radius: 10px;
                    padding: 20px;
                }
                QPushButton#btnToggleMode {
                    font-size: 18px;
                    background-color: transparent;
                    border: none;
                }
            """
            )


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
