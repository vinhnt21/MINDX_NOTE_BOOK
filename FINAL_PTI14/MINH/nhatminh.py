from PyQt6.QtWidgets import QMainWindow, QApplication, QMessageBox, QPushButton
from PyQt6 import uic
import sys
import os
from google import genai
import google.generativeai as genai
from data import load_essays, save_essays
from model import Essay
from history import HistoryWindow
# API key cho Gemini
# L∆∞u √Ω: B·∫°n n√™n qu·∫£n l√Ω API key c·ªßa m√¨nh m·ªôt c√°ch an to√†n, v√≠ d·ª• nh∆∞ s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng.
API_KEY = "---"

MAIN_UI_FILE = os.path.join(os.path.dirname(__file__), "nhatminh.ui")

essays = load_essays()

def get_answer(text, level):
    """
    G·ª≠i b√†i vi·∫øt ƒë·∫øn Gemini API ƒë·ªÉ ƒë√°nh gi√°

    Args:
        text (str): B√†i vi·∫øt c·∫ßn ƒë√°nh gi√°
        level (str): Tr√¨nh ƒë·ªô h·ªçc sinh (Beginner/Intermediate/Advanced)

    Returns:
        str: Ph·∫£n h·ªìi t·ª´ AI
    """
    try:
        genai.configure(api_key=API_KEY)

        model = genai.GenerativeModel('gemini-2.5-flash')

        role_info = f"""
        B·∫°n l√† gi√°o vi√™n ch·∫•m b√†i vi·∫øt ti·∫øng Anh.
        B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt b√†i vi·∫øt ti·∫øng Anh c·ªßa h·ªçc sinh tr√¨nh ƒë·ªô {level}.
        Mong b·∫°n h√£y ch·∫•m ƒëi·ªÉm r·∫•t ch·∫∑t ch·∫Ω n·∫øu ng∆∞·ªùi d√πng l√† Advanced, ch·∫•m ƒëi·ªÉm √≠t ch·∫∑t ch·∫Ω h∆°n ƒë·ªëi v·ªõi Intermediate, 
        ch·∫•m ƒëi·ªÉm r·∫•t nh·∫π tay ƒë·ªëi v·ªõi Beginner.
        H√£y ƒë√°nh gi√° d·ª±a tr√™n level c·ªßa h·ªçc sinh v√† nh·∫≠n x√©t theo c√°c ti√™u ch√≠:
        - Ng·ªØ ph√°p (Grammar)
        - T·ª´ v·ª±ng (Vocabulary)
        - C·∫•u tr√∫c (Structure) 
        - √ù t∆∞·ªüng (Ideas)
        - G·ª£i √Ω c·∫£i thi·ªán (Suggestions for improvement)
        - Ph√¢n t√≠ch t·ª´ v·ª±ng (c√°i n√†y c√≥ th·ªÉ cho ng·∫Øn)
        - Tr·∫£ v·ªÅ b√†i vi·∫øt ƒë∆∞·ª£c vi·∫øt l·∫°i t·ªët h∆°n cho ng∆∞·ªùi d√πng tham kh·∫£o
        - Cho c√°c Video Youtube cho ng∆∞·ªùi d√πng ƒë·ªÉ gi√∫p ng∆∞·ªùi d√πng c·∫£i thi·ªán.

        Cu·ªëi c√πng, h√£y cho ƒëi·ªÉm b√†i vi·∫øt tr√™n thang ƒëi·ªÉm 10.

        Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng text c∆° b·∫£n, chia c√°c √Ω theo g·∫°ch ƒë·∫ßu d√≤ng, kh√¥ng d√πng markdown.
        """

        question = (
            f"ƒê√°nh gi√° b√†i vi·∫øt ti·∫øng Anh n√†y c·ªßa h·ªçc sinh tr√¨nh ƒë·ªô {level}:\n\n{text}"
        )

        # Gemini s·ª≠ d·ª•ng m·ªôt ƒë·ªãnh d·∫°ng h∆°i kh√°c cho c√°c cu·ªôc h·ªôi tho·∫°i nhi·ªÅu l∆∞·ª£t
        # ·ªû ƒë√¢y ch√∫ng ta s·∫Ω b·∫Øt ƒë·∫ßu m·ªôt cu·ªôc tr√≤ chuy·ªán m·ªõi m·ªói l·∫ßn ƒë·ªÉ ƒë∆°n gi·∫£n.
        chat = model.start_chat(history=[
            {
                "role": "user",
                "parts": [role_info]
            },
            {
                "role": "model",
                "parts": ["T√¥i ƒë√£ s·∫µn s√†ng ƒë·ªÉ ch·∫•m b√†i."]
            }
        ])

        response = chat.send_message(question)

        return response.text

    except Exception as e:
        return f"L·ªói khi k·∫øt n·ªëi v·ªõi AI: {str(e)}"


def ask_question(essay, feedback, question, level):
    """
    G·ª≠i c√¢u h·ªèi th√™m v·ªÅ b√†i vi·∫øt ƒë·∫øn Gemini API

    Args:
        essay (str): B√†i vi·∫øt g·ªëc
        feedback (str): Ph·∫£n h·ªìi ƒë√£ c√≥
        question (str): C√¢u h·ªèi c·ªßa h·ªçc sinh
        level (str): Tr√¨nh ƒë·ªô h·ªçc sinh

    Returns:
        str: Ph·∫£n h·ªìi t·ª´ AI
    """
    try:
        genai.configure(api_key=API_KEY)

        model = genai.GenerativeModel('gemini-2.5-flash')

        # X√¢y d·ª±ng l·∫°i l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ cung c·∫•p ng·ªØ c·∫£nh
        history = [
            {
                "role": "user",
                "parts": [f"B·∫°n l√† gi√°o vi√™n ti·∫øng Anh ƒëang h·ªó tr·ª£ h·ªçc sinh tr√¨nh ƒë·ªô {level}."]
            },
            {
                "role": "model",
                "parts": ["ƒê∆∞·ª£c th√¥i, t√¥i s·∫Ω gi√∫p."]
            },
            {
                "role": "user",
                "parts": [f"B√†i vi·∫øt c·ªßa h·ªçc sinh:\n{essay}\n\nƒê√°nh gi√° c·ªßa b·∫°n:\n{feedback}"]
            },
            {
                "role": "model",
                "parts": ["T√¥i ƒë√£ xem l·∫°i b√†i vi·∫øt v√† ph·∫£n h·ªìi c·ªßa m√¨nh."]
            }
        ]
        
        chat = model.start_chat(history=history)
        response = chat.send_message(question)

        return response.text

    except Exception as e:
        return f"L·ªói khi k·∫øt n·ªëi v·ªõi AI: {str(e)}"

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi(MAIN_UI_FILE, self)

        self.btnToggleMode.setText("‚òÄÔ∏è")
        self.btnToggleMode.setStyleSheet(
            """
            QPushButton {
                font-size: 18px;
                background-color: transparent;
                border: none;
            }
        """
        )
        self.dark_mode = False


        self.btnEvaluate.clicked.connect(self.evaluate_text)
        self.btnToggleMode.clicked.connect(self.toggle_dark_mode)
        self.btnAsk.clicked.connect(self.ask_additional_question)
        self.btnHistory.clicked.connect(self.open_history_window)

        # ch·∫ø ƒë·ªô t·ªëi v√† l∆∞u tr·ªØ b√†i vi·∫øt/ph·∫£n h·ªìi
        self.dark_mode = False
        self.current_essay = ""
        self.current_feedback = ""
        self.history_window = None

        self.labelQuestion.setVisible(False)
        self.lineQuestion.setVisible(False)
        self.btnAsk.setVisible(False)

        self.toggle_dark_mode()

    def evaluate_text(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ƒë√°nh gi√°"""
        # L·∫•y n·ªôi dung b√†i vi·∫øt
        text = self.textInput.toPlainText().strip()

        if not text:
            QMessageBox.warning(
                self, "C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p b√†i vi·∫øt c·∫ßn ƒë√°nh gi√°!"
            )
            return

        # L·∫•y tr√¨nh ƒë·ªô t·ª´ combobox
        level = self.comboLevel.currentText()

        # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
        self.textOutput.setPlainText("ƒêang ƒë√°nh gi√° b√†i vi·∫øt, vui l√≤ng ƒë·ª£i...")
        QApplication.processEvents()  # C·∫≠p nh·∫≠t giao di·ªán

        # ƒë√°nh gi√°
        result = get_answer(text, level)

        # L∆∞u b√†i vi·∫øt 
        self.current_essay = text
        self.current_feedback = result

        # Hi·ªÉn th·ªã kq
        self.textOutput.setPlainText(result)

        # Hi·ªÉn th·ªã reply
        self.labelQuestion.setVisible(True)
        self.lineQuestion.setVisible(True)
        self.btnAsk.setVisible(True)
        
        # L∆∞u b√†i vi·∫øt
        essays.append(Essay(self.current_essay, self.current_feedback))
        save_essays(essays)
        
    def ask_additional_question(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ƒë·∫∑t c√¢u h·ªèi th√™m"""
        # Ki·ªÉm tra xem ƒë√£ c√≥ b√†i vi·∫øt v√† ph·∫£n h·ªìi ch∆∞a
        if not self.current_essay or not self.current_feedback:
            QMessageBox.warning(
                self, "C·∫£nh b√°o", "Vui l√≤ng ƒë√°nh gi√° b√†i vi·∫øt tr∆∞·ªõc khi ƒë·∫∑t c√¢u h·ªèi!"
            )
            return

        # L·∫•y c√¢u h·ªèi
        question = self.lineQuestion.text().strip()
        if not question:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")
            return

        # L·∫•y tr√¨nh ƒë·ªô
        level = self.comboLevel.currentText()

        # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
        current_text = self.textOutput.toPlainText()
        self.textOutput.setPlainText(
            current_text + "\n\nƒêang x·ª≠ l√Ω c√¢u h·ªèi, vui l√≤ng ƒë·ª£i..."
        )
        QApplication.processEvents()  # C·∫≠p nh·∫≠t giao di·ªán

        # G·ªçi API ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
        answer = ask_question(
            self.current_essay, self.current_feedback, question, level
        )

        # Hi·ªÉn th·ªã c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
        self.textOutput.setPlainText(
            current_text + f"\n\nC√¢u h·ªèi: {question}\n\nTr·∫£ l·ªùi: {answer}"
        )

        # X√≥a n·ªôi dung c√¢u h·ªèi
        self.lineQuestion.clear()

    def open_history_window(self):
        """M·ªü c·ª≠a s·ªï l·ªãch s·ª≠ b√†i vi·∫øt"""
        try:
            if self.history_window is None or not self.history_window.isVisible():
                self.history_window = HistoryWindow()
                # ƒê·ªìng b·ªô dark mode
                if self.dark_mode != self.history_window.dark_mode:
                    self.history_window.toggle_dark_mode()
            
            self.history_window.show()
            self.history_window.activateWindow()
            self.history_window.raise_()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï l·ªãch s·ª≠: {str(e)}")

    def toggle_dark_mode(self):
        """Chuy·ªÉn ƒë·ªïi gi·ªØa ch·∫ø ƒë·ªô s√°ng v√† t·ªëi"""
        self.dark_mode = not self.dark_mode

        # Thay ƒë·ªïi emoji
        if self.dark_mode:
            self.btnToggleMode.setText("üåô")

            # √Åp d·ª•ng dark mode
            self.setStyleSheet(
                """
                QMainWindow {
                    background-color: #1E1E1E;
                }
                QLabel {
                    color: #FFFFFF;
                }
                QLabel#labelTitle {
                    font-size: 28px;
                    font-weight: bold;
                    color: #64B5F6;
                }
                QPushButton {
                    background-color: #2979FF;
                    color: white;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 14px;
                }
                QPushButton:hover {
                    background-color: #1565C0;
                }
                QTextEdit {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 14px;
                }
                QComboBox {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    padding: 5px;
                    font-size: 14px;
                }
                QLineEdit {
                    background-color: #2D2D2D;
                    color: #FFFFFF;
                    border: 1px solid #555555;
                    border-radius: 5px;
                    padding: 8px;
                    font-size: 14px;
                }
                QWidget#mainContent {
                    background-color: #2D2D2D;
                    border-radius: 10px;
                    padding: 20px;
                }
                QPushButton#btnToggleMode {
                    font-size: 18px;
                    background-color: transparent;
                    border: none;
                }
            """
            )
        else:
            self.btnToggleMode.setText("‚òÄÔ∏è")

            # √Åp d·ª•ng light mode
            self.setStyleSheet(
                """
                QMainWindow {
                    background-color: #FFFFFF;
                }
                QLabel {
                    color: #333333;
                }
                QLabel#labelTitle {
                    font-size: 28px;
                    font-weight: bold;
                    color: #1976D2;
                }
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 14px;
                }
                QPushButton:hover {
                    background-color: #1976D2;
                }
                QTextEdit {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 14px;
                }
                QComboBox {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    padding: 5px;
                    font-size: 14px;
                }
                QLineEdit {
                    background-color: #F5F5F5;
                    color: #333333;
                    border: 1px solid #DDDDDD;
                    border-radius: 5px;
                    padding: 8px;
                    font-size: 14px;
                }
                QWidget#mainContent {
                    background-color: #FFFFFF;
                    border-radius: 10px;
                    padding: 20px;
                }
                QPushButton#btnToggleMode {
                    font-size: 18px;
                    background-color: transparent;
                    border: none;
                }
            """
            )


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
